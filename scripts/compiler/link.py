# This file is auto-generated by ConstantManager. Do not edit it manually.

from dataclasses import dataclass
from enum import Enum
from typing import Dict


class LinkType(Enum):
    CHANNEL = 0
    DSP = 1


class LinkTarget(Enum):
    SPLITTER_OUTPUT = "splitter_output"
    SPLITTER_DSP = "splitter_dsp"
    DIRECT_OUTPUT = "direct_output"
    DIRECT_DSP = "direct_dsp"
    ENVELOPE = "envelope"
    SEQUENCE = "sequence"
    COMMANDS_SEQUENCE = "commands_sequence"
    ORDER = "order"
    OSCILLATOR = "oscillator"
    WAVETABLE = "wavetable"
    DSP = "dsp"
    CHANNEL = "channel"
    COMMANDS_CHANNEL = "commands_channel"
    UNUSED = "unused"

    @staticmethod
    def from_integer(integer: int) -> "LinkTarget":
        dictionary: Dict[int, LinkTarget] = {
            0: LinkTarget.SPLITTER_OUTPUT,
            1: LinkTarget.SPLITTER_DSP,
            2: LinkTarget.DIRECT_OUTPUT,
            3: LinkTarget.DIRECT_DSP,
            4: LinkTarget.ENVELOPE,
            5: LinkTarget.SEQUENCE,
            6: LinkTarget.COMMANDS_SEQUENCE,
            7: LinkTarget.ORDER,
            8: LinkTarget.OSCILLATOR,
            9: LinkTarget.WAVETABLE,
            10: LinkTarget.DSP,
            11: LinkTarget.CHANNEL,
            12: LinkTarget.COMMANDS_CHANNEL,
            13: LinkTarget.UNUSED,
        }

        return dictionary[integer]


@dataclass
class Link:
    type: LinkType
    id: int
    target: LinkTarget
    index: int
    offset: int
