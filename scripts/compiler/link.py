# This file is auto-generated by ConstantManager. Do not edit it manually.

from dataclasses import dataclass
from enum import Enum
from typing import Dict


class LinkType(Enum):
    CHANNEL = 0
    DSP = 1


class LinkTarget(Enum):
    SPLITTER = "splitter"
    OUTPUT_CHANNEL = "output_channel"
    DSP_CHANNEL = "dsp_channel"
    ENVELOPE = "envelope"
    SEQUENCE = "sequence"
    ORDER = "order"
    OSCILLATOR = "oscillator"
    WAVETABLE = "wavetable"
    DSP = "dsp"
    CHANNEL = "channel"
    UNUSED = "unused"

    @staticmethod
    def from_integer(integer: int) -> "LinkTarget":
        dictionary: Dict[int, LinkTarget] = {
            0: LinkTarget.SPLITTER,
            1: LinkTarget.OUTPUT_CHANNEL,
            2: LinkTarget.DSP_CHANNEL,
            3: LinkTarget.ENVELOPE,
            4: LinkTarget.SEQUENCE,
            5: LinkTarget.ORDER,
            6: LinkTarget.OSCILLATOR,
            7: LinkTarget.WAVETABLE,
            8: LinkTarget.DSP,
            9: LinkTarget.CHANNEL,
            10: LinkTarget.UNUSED,
        }

        return dictionary[integer]


@dataclass
class Link:
    type: LinkType
    id: int
    target: LinkTarget
    index: int
    offset: int
