import math
from typing import Any, Optional

import yaml
from pyconf import CONFIG_ASM_FILE, CONFIG_YAML_FILE


def get_config_line(key: Optional[str] = None, value: Optional[Any] = None) -> str:
    if not key:
        return ""
    if isinstance(value, bool):
        return f"    %define {key.upper()} {1 if value else 0}"
    if isinstance(value, float):
        return f"    %define {key.upper()} __float32__({value})"
    if not value:
        return f"    %define {key.upper()}"

    return f"    %define {key.upper()} {value}"


if __name__ == "__main__":
    with open(CONFIG_YAML_FILE, "r") as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    config_lines = ["; File automatically generated by config.py"]

    def add_config_line(key: Optional[str] = None, value: Optional[Any] = None):
        config_lines.append(get_config_line(key, value))

    add_config_line("sample_rate", config["sample_rate"])
    add_config_line("precalculate", config["precalculate"])
    add_config_line()

    angle_constant = 2 * math.pi / config["table_size"]
    add_config_line("table_size", config["table_size"])
    add_config_line("angle_constant", angle_constant)
    add_config_line()

    soundblaster16 = config["soundblaster16"]
    if soundblaster16["enabled"]:
        add_config_line("direct_mode", False)
        add_config_line("sb_buffer_size", soundblaster16["buffer_size"])
        add_config_line("sb_exact_sample_rate", soundblaster16["exact_sample_rate"])
        add_config_line("sb_base_port", soundblaster16["base_port"])
        add_config_line("sb_irq", soundblaster16["irq"])

        bits16 = soundblaster16["bits"] == 16
        add_config_line("sb_8bit", not bits16)
        add_config_line("sb_16bit", bits16)
    else:
        add_config_line("direct_mode", True)

    add_config_line()
    asm_config = "\n".join(config_lines)
    with open(CONFIG_ASM_FILE, "w") as file:
        file.write(asm_config)
